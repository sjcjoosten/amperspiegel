Classification := "CLASSIFY", "mainConcept" "String", "IS", "conceptList" "ConceptList"
ClassificationStatement := "classification" "Classification"
ConceptList := "head1" "String", "/\\", "tail1" "ConceptList"
             | "head1" "String"
ConsConceptList := "head1" "String", "/\\", "tail1" "ConceptList"
ConsSyntaxList := "head2" "SyntaxElement", ",", "tail2" "SyntaxList"
Declaration := "relation" "StringAndOrigin", "::", "concepts" "DeclarationType"
DeclarationStatement := "declaration" "Declaration"
DeclarationType := "fst" "String", "*", "snd" "String"
QuotedStringElement := "qstring" "QuotedString"
RelationElement := "relationName" "UnquotedString"
Statement := "classification" "Classification"
           | "declaration" "Declaration"
           | "syntax" "Syntax"
Syntax := "VIEW", "concept" "String", "=", "[", "syntaxList" "SyntaxList", "]"
SyntaxElement := "qstring" "QuotedString"
               | "relationName" "UnquotedString"
SyntaxList := "head2" "SyntaxElement", ",", "tail2" "SyntaxList"
            | "head2" "SyntaxElement"
SyntaxStatement := "syntax" "Syntax"

pre conceptList |- during conceptLists
(during conceptLists;pre tail1) |- during conceptLists
((pre mainConcept~;during conceptLists);pre head1) |- during subConcepts
(during subConcepts;during subConcepts) |- during subConcepts
((pre mainConcept~;pre mainConcept) /\ =) |- during subConcepts
((pre concept~;pre concept) /\ =) |- during subConcepts
pre qstring |- =
pre relationName |- =
(pre string;pre string~) |- =
((pre declaration;pre relation);pre string) |- pre relationName
((pre declaration;pre concepts);pre snd) |- post nonTerminal
((during subConcepts~;pre concept~);pre syntaxList) |- post choice
pre head2 |- post recogniser
pre tail2 |- post continuation
((post eFst;post eFst~) /\ (post eSnd;post eSnd~)) |- =
(post conjunct;post conjunct~) |- =
(post converse;post converse~) |- =
(post compose;post compose~) |- =
(post pre;post pre~) |- =
(post post;post post~) |- =
(post during;post during~) |- =
pre during |- post during
pre pre |- post pre
pre post |- post post
pre converse |- post converse
pre conjunct |- post conjunct
pre eFst |- post eFst
pre eSnd |- post eSnd
pre compose |- post compose
pre rule |- post rule
pre pair1 |- post pair1
pre pair2 |- post pair2
pre declaration |- post rule
(pre relation;pre string) |- (post eFst;post pre)
(pre relation;pre string) |- (post eSnd;post post)
< "r1" , "r1" > |- post rule
< "r2" , "r2" > |- post rule
< "r1" , "string" > |- (post eFst;post pre)
< "r1" , "string" > |- (post eSnd;post post)
< "r2" , "origin" > |- (post eFst;post pre)
< "r2" , "origin" > |- (post eSnd;post post)

asParser
parser
population
switches

asParser
parser
switches
Classification := "CLASSIFY", "mainConcept" "String", "IS", "conceptList" "ConceptList"
ClassificationStatement := "classification" "Classification"
ConceptList := "head1" "String", "/\\", "tail1" "ConceptList"
             | "head1" "String"
ConsConceptList := "head1" "String", "/\\", "tail1" "ConceptList"
ConsSyntaxList := "head2" "SyntaxElement", ",", "tail2" "SyntaxList"
Declaration := "relation" "StringAndOrigin", "::", "concepts" "DeclarationType"
DeclarationStatement := "declaration" "Declaration"
DeclarationType := "fst" "String", "*", "snd" "String"
QuotedStringElement := "qstring" "QuotedString"
RelationElement := "relationName" "UnquotedString"
Statement := "classification" "Classification"
           | "declaration" "Declaration"
           | "syntax" "Syntax"
Syntax := "VIEW", "concept" "String", "=", "[", "syntaxList" "SyntaxList", "]"
SyntaxElement := "qstring" "QuotedString"
               | "relationName" "UnquotedString"
SyntaxList := "head2" "SyntaxElement", ",", "tail2" "SyntaxList"
            | "head2" "SyntaxElement"
SyntaxStatement := "syntax" "Syntax"

