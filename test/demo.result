
parent :: Person * Person
dad :: Person * Man

CLASSIFY Man IS Man /\ Person
CLASSIFY Woman IS Woman /\ Person

"declaration"   ∋ Fresh 0  ↦ Fresh 1
"concepts"      ∋ Fresh 1  ↦ Fresh 3
"relation"      ∋ Fresh 1  ↦ Fresh 2
"origin"        ∋ Fresh 2  ↦ Position 1 0
"string"        ∋ Fresh 2  ↦ "parent"
"fst"           ∋ Fresh 3  ↦ "Person"
"snd"           ∋ Fresh 3  ↦ "Person"
"declaration"   ∋ Fresh 4  ↦ Fresh 5
"concepts"      ∋ Fresh 5  ↦ Fresh 7
"relation"      ∋ Fresh 5  ↦ Fresh 6
"origin"        ∋ Fresh 6  ↦ Position 2 0
"string"        ∋ Fresh 6  ↦ "dad"
"fst"           ∋ Fresh 7  ↦ "Person"
"snd"           ∋ Fresh 7  ↦ "Man"
"classification"∋ Fresh 8  ↦ Fresh 9
"conceptList"   ∋ Fresh 9  ↦ Fresh 10
"mainConcept"   ∋ Fresh 9  ↦ "Man"
"head1"         ∋ Fresh 10 ↦ "Man"
"tail1"         ∋ Fresh 10 ↦ Fresh 11
"head1"         ∋ Fresh 11 ↦ "Person"
"classification"∋ Fresh 12 ↦ Fresh 13
"conceptList"   ∋ Fresh 13 ↦ Fresh 14
"mainConcept"   ∋ Fresh 13 ↦ "Woman"
"head1"         ∋ Fresh 14 ↦ "Woman"
"tail1"         ∋ Fresh 14 ↦ Fresh 15
"head1"         ∋ Fresh 15 ↦ "Person"


parent :: Person * Person
dad :: Person * Man
name :: Person * String -- string is built-in (has a parser defined for it)

CLASSIFY Man IS Man /\ Person
CLASSIFY Woman IS Woman /\ Person

VIEW Man = ["Man", name]
VIEW Woman = ["Woman", name]
VIEW Person = ["Father", "of", name, "is", dad]

CLASSIFY Person IS Statement /\ Person -- Parser will parse a list of statements

Man := "Man", "name" "String"
Person := "Man", "name" "String"
        | "Woman", "name" "String"
        | "Father", "of", "name" "String", "is", "dad" "Man"
Statement := "Man", "name" "String"
           | "Woman", "name" "String"
           | "Father", "of", "name" "String", "is", "dad" "Man"
Woman := "Woman", "name" "String"

"choice"      ∋ "Man"       ↦ Fresh 22
"choice"      ∋ "Person"    ↦ Fresh 22
"choice"      ∋ "Person"    ↦ Fresh 28
"choice"      ∋ "Person"    ↦ Fresh 34
"choice"      ∋ "Statement" ↦ Fresh 22
"choice"      ∋ "Statement" ↦ Fresh 28
"choice"      ∋ "Statement" ↦ Fresh 34
"choice"      ∋ "Woman"     ↦ Fresh 28
"nonTerminal" ∋ "dad"       ↦ "Man"
"rule"        ∋ "dad"       ↦ Fresh 5
"nonTerminal" ∋ "name"      ↦ "String"
"rule"        ∋ "name"      ↦ Fresh 9
"nonTerminal" ∋ "parent"    ↦ "Person"
"rule"        ∋ "parent"    ↦ Fresh 1
"eFst"        ∋ "r1"        ↦ Fresh 51
"eSnd"        ∋ "r1"        ↦ Fresh 50
"rule"        ∋ "r1"        ↦ "r1"
"eFst"        ∋ "r2"        ↦ Fresh 49
"eSnd"        ∋ "r2"        ↦ Fresh 48
"rule"        ∋ "r2"        ↦ "r2"
"eFst"        ∋ Fresh 1     ↦ Fresh 52
"eSnd"        ∋ Fresh 1     ↦ Fresh 53
"eFst"        ∋ Fresh 5     ↦ Fresh 54
"eSnd"        ∋ Fresh 5     ↦ Fresh 55
"eFst"        ∋ Fresh 9     ↦ Fresh 56
"eSnd"        ∋ Fresh 9     ↦ Fresh 57
"continuation"∋ Fresh 22    ↦ Fresh 24
"recogniser"  ∋ Fresh 22    ↦ "\"Man\""
"recogniser"  ∋ Fresh 24    ↦ "name"
"continuation"∋ Fresh 28    ↦ Fresh 30
"recogniser"  ∋ Fresh 28    ↦ "\"Woman\""
"recogniser"  ∋ Fresh 30    ↦ "name"
"continuation"∋ Fresh 34    ↦ Fresh 36
"recogniser"  ∋ Fresh 34    ↦ "\"Father\""
"continuation"∋ Fresh 36    ↦ Fresh 38
"recogniser"  ∋ Fresh 36    ↦ "\"of\""
"continuation"∋ Fresh 38    ↦ Fresh 40
"recogniser"  ∋ Fresh 38    ↦ "name"
"continuation"∋ Fresh 40    ↦ Fresh 42
"recogniser"  ∋ Fresh 40    ↦ "\"is\""
"recogniser"  ∋ Fresh 42    ↦ "dad"
"post"        ∋ Fresh 48    ↦ "origin"
"pre"         ∋ Fresh 49    ↦ "origin"
"post"        ∋ Fresh 50    ↦ "string"
"pre"         ∋ Fresh 51    ↦ "string"
"pre"         ∋ Fresh 52    ↦ "parent"
"post"        ∋ Fresh 53    ↦ "parent"
"pre"         ∋ Fresh 54    ↦ "dad"
"post"        ∋ Fresh 55    ↦ "dad"
"pre"         ∋ Fresh 56    ↦ "name"
"post"        ∋ Fresh 57    ↦ "name"


Man Han
Father of Bas is Man Stef

"name"∋ Fresh 0 ↦ "Han"
"dad" ∋ Fresh 1 ↦ Fresh 2
"name"∋ Fresh 1 ↦ "Bas"
"name"∋ Fresh 2 ↦ "Stef"


parent :: Person * Person
dad :: Person * Man
name :: Person * String -- string is built-in (has a parser defined for it)

CLASSIFY Man IS Man /\ Person
CLASSIFY Woman IS Woman /\ Person

VIEW Man = ["Man", name]
VIEW Woman = ["Woman", name]
VIEW Person = ["Father", "of", name, "is", dad]

CLASSIFY Person IS Statement /\ Person -- Parser will parse a list of statements

     1	parent :: Person * Person
     2	dad :: Person * Man
     3	name :: Person * String -- string is built-in (has a parser defined for it)
     4	
     5	CLASSIFY Man IS Man /\ Person
     6	CLASSIFY Woman IS Woman /\ Person
     7	
     8	VIEW Man = ["Man", name]
     9	VIEW Woman = ["Woman", name]
    10	VIEW Person = ["Father", "of", name, "is", dad]
    11	
    12	CLASSIFY Person IS Statement /\ Person -- Parser will parse a list of statements
    13	
    14	RULE dad |- parent
274
177
177
Man := "Man", "name" "String"
Person := "Man", "name" "String"
        | "Woman", "name" "String"
        | "Father", "of", "name" "String", "is", "dad" "Man"
Statement := "Man", "name" "String"
           | "Woman", "name" "String"
           | "Father", "of", "name" "String", "is", "dad" "Man"
Woman := "Woman", "name" "String"

Man := "Man", "name" "String"
Person := "Man", "name" "String"
        | "Woman", "name" "String"
        | "Father", "of", "name" "String", "is", "dad" "Man"
Statement := "Man", "name" "String"
           | "Woman", "name" "String"
           | "Father", "of", "name" "String", "is", "dad" "Man"
Woman := "Woman", "name" "String"


Man Han
Father of Bas is Man Stef

"name"  ∋ Fresh 0 ↦ "Han"
"dad"   ∋ Fresh 1 ↦ Fresh 2
"name"  ∋ Fresh 1 ↦ "Bas"
"parent"∋ Fresh 1 ↦ Fresh 2
"name"  ∋ Fresh 2 ↦ "Stef"


Man Bas
Father of Bas is Man Stef

"name"  ∋ Fresh 0 ↦ "Bas"
"dad"   ∋ Fresh 1 ↦ Fresh 2
"name"  ∋ Fresh 1 ↦ "Bas"
"parent"∋ Fresh 1 ↦ Fresh 2
"name"  ∋ Fresh 2 ↦ "Stef"

parent :: Person * Person
dad :: Person * Man
name :: Person * String -- string is built-in (has a parser defined for it)

CLASSIFY Man IS Man /\ Person
CLASSIFY Woman IS Woman /\ Person

VIEW Man = ["Man", name]
VIEW Woman = ["Woman", name]
VIEW Person = ["Father", "of", name, "is", dad]

CLASSIFY Person IS Statement /\ Person -- Parser will parse a list of statements

RULE pre dad |- post parent
 -- names identify the person (name is INJ)
RULE (pre name;pre name ~) |- I -- symbol for identity relation is . for now

RULE pre name |- I
"dad"   ∋ "Bas"  ↦ "Stef"
"name"  ∋ "Bas"  ↦ "Bas"
"parent"∋ "Bas"  ↦ "Stef"
"name"  ∋ "Stef" ↦ "Stef"

